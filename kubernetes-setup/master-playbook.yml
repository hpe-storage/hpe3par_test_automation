---
- hosts: all
  become: true
  vars_files:
  - ../config/config.yaml
  
  tasks:
  - name: copy blade public key to vagrant master node for ssh connection
    authorized_key:
      user: root
      state: present
      key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
      
  - name: restart sshd service
    service:
      name: sshd
      state: restarted
   
  - name: Disabling Swap on all nodes
    shell: swapoff -a

  - name: Commenting Swap entries in /etc/fstab
    replace:
     path: /etc/fstab
     regexp: '(.*swap*)'
     replace: '#\1'
 
  - name: create docker.service.d
    file:
      path: /etc/systemd/system/docker.service.d
      state: directory

  - name: set http proxy for docker
    blockinfile:
      path: /etc/systemd/system/docker.service.d/http-proxy.conf
      create: yes
      block: |
        [Service]
        Environment="HTTP_PROXY={{http_proxy}}/"
        "NO_PROXY={{no_proxy}}"

  - name: set https proxy for docker
    blockinfile:
      path: /etc/systemd/system/docker.service.d/https-proxy.conf
      create: yes
      block: |
        [Service]
        Environment="HTTPS_PROXY={{https_proxy}}/"
        "NO_PROXY={{no_proxy}}"

  - name: Install required pkgs
    yum:
      name: "{{ item }}"
      state: latest
    with_items:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - git
      - wget
        
  - name: Add Docker repo
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docer-ce.repo

  - name: Enable Docker Edge & Test repo
    ini_file:
      dest: /etc/yum.repos.d/docer-ce.repo
      section: "{{ item }}"
      option: enabled
      value: 0
    with_items: ['docker-ce-test', 'docker-ce-edge']

  - name: Install Docker
    package:
      name: docker-ce
      state: latest
      
  - name: Start Docker service
    service:
      name: docker
      state: started
      enabled: yes

  - name: Add user vagrant to docker group
    user:
      name: vagrant
      groups: docker
      append: yes
      
  - name: Adding repository details in Kubernetes repo file.
    blockinfile:
     path: /etc/yum.repos.d/kubernetes.repo
     create: yes
     block: |
       [kubernetes]
       name=Kubernetes
       baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
       enabled=1
       gpgcheck=0
       repo_gpgcheck=0
       gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        
  - name: Set SELinux in permissive mode (effectively disabling it)
    shell: |
      setenforce 0
      sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    
  - name: Installing kubernetes packages
    yum:
     name: "{{ item }}"
     state: present
    with_items: "{{ packages }}"

  - name: Starting and Enabling the required services
    service:
     name: "{{ item }}"
     state: started
     enabled: yes
    with_items: 
     - kubelet
     
  - name: Update Bridge Firewall rule in config
    blockinfile:
     path: /etc/sysctl.d/k8s.conf
     create: yes
     block: |
       net.bridge.bridge-nf-call-ip6tables = 1
       net.bridge.bridge-nf-call-iptables = 1
       
  - name: Enabling Bridge Firewall Rule
    shell: sysctl --system

  - name: Pulling images required for setting up a Kubernetes cluster
    shell: kubeadm config images pull
 
  - name: Resetting kubeadm
    shell: kubeadm reset -f

  - name: Initializing Kubernetes cluster
    shell: kubeadm init --apiserver-advertise-address {{master_node_ip}} --pod-network-cidr=10.244.0.0/16
    register: output

  - name: Copying required files
    shell: |
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config
     
  - name: Install Network Add-on
    command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml 
    
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
   
  - name: download get-pip.py
    get_url:
      url: http://bootstrap.pypa.io/get-pip.py
      dest: /tmp

  - name: install pip
    command: "python /tmp/get-pip.py"

  - name: delete get-pip.py
    file:
      state: absent
      path: /tmp/get-pip.py
    
  - name: Uninstall docker old packages
    pip:
      name: "{{ item }}"
      state: absent
    with_items:
      - docker
      - docker-py
        
  - name: Install required python packages
    pip:
      name: "{{ item }}"
      state: latest
    with_items:
      - pytest
      - PyYAML
      - kubernetes
      - python-3parclient
      - oslo_serialization
      - docker
      - ansible==2.7.12
      
  - name: update etchosts
    lineinfile:
      path: /etc/hosts
      line: "{{ item }}"
      insertafter: EOF
    with_items: "{{ hosts_names }}"
              
  - name: Check if public key exists
    stat:
      path: /root/.ssh/id_rsa
    register: public_key_file
    
  - name: generate key
    command: ssh-keygen -f '/root/.ssh/id_rsa' -N "" -q
    when: public_key_file.stat.exists == False 
          
  - name: cat public key
    command: cat /root/.ssh/id_rsa.pub
    register: public_key

  - name: Copy public key to local file
    local_action: copy content="{{ public_key.stdout_lines[0] }}" dest="./public-key"
    
  - name: restart service
    service:
      name: sshd
      state: restarted

